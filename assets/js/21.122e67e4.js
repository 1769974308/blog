(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{183:function(t,a,e){"use strict";e.r(a);var r=e(0),n=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"nginx功能介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nginx功能介绍","aria-hidden":"true"}},[t._v("#")]),t._v(" nginx功能介绍")]),t._v(" "),e("h2",{attrs:{id:"一、http代理和反向代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、http代理和反向代理","aria-hidden":"true"}},[t._v("#")]),t._v(" 一、HTTP代理和反向代理")]),t._v(" "),e("p",[t._v("反向代理就是中转分发，分发可以有丰富的规则")]),t._v(" "),e("h2",{attrs:{id:"二、负载均衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、负载均衡","aria-hidden":"true"}},[t._v("#")]),t._v(" 二、负载均衡")]),t._v(" "),e("p",[t._v("负载均衡两方面，一方面是将单一的重负载分担到多个网络节点上做并行处理，每个节点处理结束将结果返回给用户。第二方面，将大量的前端并发访问或数据流量分担到多个后端网络节点上分别处理，减少前端用户等待响应的时间。")]),t._v(" "),e("p",[t._v("Nginx服务器的负载均衡策略可以划分为两大类：即内置策略和扩展策略。内置策略主要包含轮询、加权轮询，IP hash三种，扩展策略 通过第三方模块实现，常见有url hash、fair等")]),t._v(" "),e("p",[t._v("内置策略已经编译到Nginx内核，扩展策略不会编译进Nginx，需要自己编译到Nginx内核。")]),t._v(" "),e("h2",{attrs:{id:"三、web缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、web缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 三、Web缓存")]),t._v(" "),e("p",[t._v("Squid就是web缓存代表，而Nginx也实现了缓存功能，Proxy_Cache主要用于在Nginx服务器提供反向代理服务，对后端源服务器返回内容进行URL缓存，FastCGI_Cache主要用于对FastCGI的动态程序进行缓存，另外还有一款常用的第三方模块ngx_cache_purge也是Nginx服务器web缓存功能。它主要用于清除Nginx服务器上指定的URL缓存。")])])}],!1,null,null,null);a.default=n.exports}}]);